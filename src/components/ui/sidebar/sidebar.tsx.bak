import * as React from "react"
import { cn } from "@/lib/utils"
import { X } from "lucide-react"
import { useSidebar } from "./sidebar-context"

// Constants
const SIDEBAR_WIDTH_MOBILE = "18rem"

// Flag to track if navigation is in progress 
let isNavigating = false;

export const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()
    
    // Track location changes to detect navigation
    const [currentPath, setCurrentPath] = React.useState("");
    
    // Create a ref for the custom mobile sidebar
    const mobileSidebarRef = React.useRef<HTMLDivElement>(null);
    
    React.useEffect(() => {
      // Update current path and set navigation flag
      const handleNavigation = () => {
        if (currentPath && currentPath !== window.location.pathname) {
          isNavigating = true;
          
          // Reset the flag after navigation completes
          setTimeout(() => {
            isNavigating = false;
          }, 500);
        }
        setCurrentPath(window.location.pathname);
      };
      
      // Set initial path
      if (!currentPath) {
        setCurrentPath(window.location.pathname);
      }
      
      // Listen for history changes
      window.addEventListener('popstate', handleNavigation);
      
      // Listen for click events on links that might trigger navigation
      const handleClick = () => {
        setTimeout(() => {
          if (currentPath !== window.location.pathname) {
            handleNavigation();
          }
        }, 10);
      };
      
      document.addEventListener('click', handleClick);
      
      return () => {
        window.removeEventListener('popstate', handleNavigation);
        document.removeEventListener('click', handleClick);
      };
    }, [currentPath]);

    // Handle close button click
    const handleCloseClick = React.useCallback(() => {
      setOpenMobile(false);
    }, [setOpenMobile]);
    
    // Handle backdrop click (close sidebar)
    const handleBackdropClick = React.useCallback(() => {
      setOpenMobile(false);
    }, [setOpenMobile]);

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    // Custom mobile sidebar implementation
    if (isMobile) {
      // Skip rendering Sheet entirely during navigation
      if (isNavigating && !openMobile) {
        return null;
      }
      
      return (
        <>
          {/* Custom mobile sidebar with direct DOM control */}
          {openMobile && (
            // Backdrop - fixed position covering whole screen
            <div 
              className="fixed inset-0 z-50 bg-black/80"
              onClick={handleBackdropClick}
              aria-hidden="true"
            >
              {/* Sidebar content - prevent clicks from propagating to backdrop */}
              <div
                ref={mobileSidebarRef}
                className="fixed inset-y-0 left-0 z-50 w-72 max-w-[80%] bg-sidebar p-0 text-sidebar-foreground shadow-lg"
                onClick={(e) => e.stopPropagation()}
                data-sidebar="sidebar"
                data-mobile="true"
              >
                {/* Close button */}
                <button 
                  onClick={handleCloseClick}
                  className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"
                  aria-label="Close"
                >
                  <X className="h-4 w-4" />
                  <span className="sr-only">Close</span>
                </button>
                
                {/* Sidebar content */}
                <div className="flex h-full w-full flex-col">
                  {children}
                </div>
              </div>
            </div>
          )}
        </>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"
